#!/usr/bin/env python3
"""
Demo script for the new Zynthian controls.

This demonstrates the new control scheme for Zynthian v4 hardware:
- Encoder 0: Sequencer steps (1-32) with apply via button
- Encoder 1: Scale selection with apply via button
- Encoder 2: Root note selection (C-B) with apply via button
- Encoder 3: Direction pattern selection with apply via button
- Buttons S1-S4: Direct CC profile selection

Run this script to see a demonstration of the control workflow.
"""

import sys
import os
import time

# Add src directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def demo_zynthian_controls():
    """Demonstrate the new Zynthian control workflow"""
    
    print("üéπ Mystery Melody Machine - Zynthian v4 Controls Demo")
    print("=" * 60)
    print()
    
    print("NEW CONTROL SCHEME:")
    print()
    
    print("üìü ENCODERS (rotate to browse, press to apply):")
    print("  Encoder 0 (Layer):  Sequencer Steps (1-32)")
    print("  Encoder 1 (Back):   Scale Selection")
    print("  Encoder 2 (Select): Root Note (C-B)")
    print("  Encoder 3 (Learn):  Direction Pattern")
    print()
    
    print("üîò BUTTONS (instant CC profile selection):")
    print("  S1: Korg NTS-1 MK2")
    print("  S2: Roland JX-08")
    print("  S3: Waldorf Streichfett")
    print("  S4: Generic Analog")
    print()
    
    print("üéµ WORKFLOW EXAMPLES:")
    print("-" * 40)
    
    # Example 1: Changing sequence length
    print()
    print("1Ô∏è‚É£  Changing Sequence Length:")
    print("   ‚Ä¢ Rotate Encoder 0 clockwise ‚Üí Steps: 4 ‚Üí 5 ‚Üí 6 ‚Üí 7 ‚Üí 8")
    print("   ‚Ä¢ See current selection on display (future)")
    print("   ‚Ä¢ Press Encoder 0 button ‚Üí Apply 8 steps to sequencer")
    print("   ‚Ä¢ Sequencer immediately switches to 8-step pattern")
    
    # Example 2: Switching scales
    print()
    print("2Ô∏è‚É£  Switching Musical Scales:")
    print("   ‚Ä¢ Rotate Encoder 1 ‚Üí Scale: major ‚Üí minor ‚Üí pentatonic_major")
    print("   ‚Ä¢ Hear preview notes at current tempo (future)")
    print("   ‚Ä¢ Press Encoder 1 button ‚Üí Apply pentatonic_major")
    print("   ‚Ä¢ All future notes use new scale, quantized to bar boundary")
    
    # Example 3: Changing root note
    print()
    print("3Ô∏è‚É£  Transposing Root Note:")
    print("   ‚Ä¢ Rotate Encoder 2 ‚Üí Root: C ‚Üí C# ‚Üí D ‚Üí D# ‚Üí E")
    print("   ‚Ä¢ See note name on display")
    print("   ‚Ä¢ Press Encoder 2 button ‚Üí Apply E as new root")
    print("   ‚Ä¢ Entire sequence transposes to E major/minor/etc.")
    
    # Example 4: Direction patterns
    print()
    print("4Ô∏è‚É£  Changing Sequence Direction:")
    print("   ‚Ä¢ Rotate Encoder 3 ‚Üí Direction: forward ‚Üí backward ‚Üí ping_pong")
    print("   ‚Ä¢ Press Encoder 3 button ‚Üí Apply ping_pong pattern")
    print("   ‚Ä¢ Sequence plays forward then backward repeatedly")
    
    # Example 5: CC Profile switching
    print()
    print("5Ô∏è‚É£  Switching Synthesizers:")
    print("   ‚Ä¢ Press S1 ‚Üí Instantly switch to NTS-1 MK2 CC mappings")
    print("   ‚Ä¢ All knobs/joystick now control NTS-1 parameters")
    print("   ‚Ä¢ Press S2 ‚Üí Switch to Roland JX-08 parameters")
    print("   ‚Ä¢ Press S3 ‚Üí Switch to Streichfett parameters")
    print("   ‚Ä¢ Press S4 ‚Üí Switch to generic analog parameters")
    
    print()
    print("‚ú® ADVANTAGES:")
    print("-" * 40)
    print("‚Ä¢ üéØ Direct hardware control without external MIDI controller")
    print("‚Ä¢ üîÑ Browse-then-apply workflow prevents accidental changes")
    print("‚Ä¢ ‚ö° Instant CC profile switching for multi-synth setups")
    print("‚Ä¢ üéµ Musical parameters (scales, root notes) easily accessible")
    print("‚Ä¢ üî¢ Sequence length adjustable in real-time (1-32 steps)")
    print("‚Ä¢ üéº Direction patterns add rhythmic variety")
    print()
    
    print("üöÄ PERFORMANCE USE:")
    print("-" * 40)
    print("‚Ä¢ Rotate encoders to browse options while music plays")
    print("‚Ä¢ Press encoder buttons to apply changes at musical moments")
    print("‚Ä¢ Use S1-S4 buttons for instant synth switching")
    print("‚Ä¢ All changes are tempo-synced and musically quantized")
    print()
    
    print("üìù CONFIGURATION:")
    print("-" * 40)
    print("‚Ä¢ Copy examples/config.zynthian.example.yaml ‚Üí config.yaml")
    print("‚Ä¢ Set zynthian.enabled: true")
    print("‚Ä¢ Connect Zynthian MIDI DIN to your synthesizers")
    print("‚Ä¢ Run with: python src/main.py --config config.yaml")
    
    print()
    print("üéπ Ready to create evolving generative music with tactile control!")

if __name__ == "__main__":
    demo_zynthian_controls()
